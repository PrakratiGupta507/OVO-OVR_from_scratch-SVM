# -*- coding: utf-8 -*-
"""Q2(3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14BcuFH_5ieNQNBSpSYV97RWduUTg3YUI
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
import matplotlib.pyplot as plt
from matplotlib.axes._axes import _log as matplotlib_axes_logger
from sklearn.svm import SVC

import scipy.io
mat = scipy.io.loadmat('/content/drive/My Drive/ML assignment 3/dataset_a.mat')

samples, label = mat['samples'], mat['labels']
df = pd.DataFrame(list(samples))
label = pd.DataFrame(label[0])
df['label'] = label
x=df[0]
y=df[1]
z=df['label']
data = pd.DataFrame({"X_Value": x, "Y_Value": y, "Category": z})

y = data["Category"]
X = data.drop(["Category"],axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

type(X_train)

class svm_s(object):
  def __init__(self, k = "rbf", c=0,ga='scale'):
    self.SVM = svm.SVC(kernel = k, C = c, gamma=ga)
  def fit(self,X,y):
    self.SVM.fit(X, y)

  def predict(self,X):
    pred = self.SVM.decision_function(X)
    for i in range(pred.shape[0]):
      if pred[i] < 0:
        pred[i] = 0
      else:
        pred[i] = 1
    return pred
  def plotrbf(self, ax=None, plot_support=True):
    if ax is None:
        ax = plt.gca()
    x_li = ax.get_xlim()
    y_li = ax.get_ylim()
    x = np.linspace(x_li[0], x_li[1], 30)
    y = np.linspace(y_li[0], y_li[1], 30)
    Y_value, X_value = np.meshgrid(y, x)
    a = np.vstack([X_value.ravel(), Y_value.ravel()]).T
    P = self.SVM.decision_function(a).reshape(X_value.shape)
    ax.contour(X_value, Y_value, P, colors='k',levels=[-1, 0, 1], alpha=0.9,linestyles=['--', '-', '--'])
    if plot_support:
        ax.scatter(self.SVM.support_vectors_[:, 0],self.SVM.support_vectors_[:, 1],s=300, linewidth=1, facecolors='none',);
    ax.set_xlim(x_li)
    ax.set_ylim(y_li)

C = [0.001, 0.01, 0.1, 1, 10, 100]
g = [0.001, 0.01, 0.1, 1, 10, 100]
classifiers=[]
for i in C:
  for j in g:
    mySVM = svm_s(c=i,ga=j)
    mySVM.fit(X_train.values, y_train.values)
    y_pred = mySVM.predict(X_test.values)
    print("C : ",i,"G : ",j,"Accuracy :",np.mean(y_pred==y_test.values))

mySVM = svm_s(c=0.001,ga=1)
mySVM.fit(X_train.values, y_train.values)
y_pred = mySVM.predict(X_test.values)

sns.scatterplot(X_train.values[:, 0], X_train.values[:, 1], c=y_train.values, s=50, cmap='Wistia')
mySVM.plotrbf(plot_support=False)
plt.title("C : 0.001, Gamma = 1, Accuracy = 1")

mySVM = svm_s(c=1,ga=0.01)
mySVM.fit(X_train.values, y_train.values)
y_pred = mySVM.predict(X_test.values)

sns.scatterplot(X_train.values[:, 0], X_train.values[:, 1], c=y_train.values, s=50, cmap='Wistia')
mySVM.plotrbf(plot_support=False)
plt.title("C : 1, Gamma = 0.01, Accuracy = 0.7325")

mySVM = svm_s(c=10,ga=10)
mySVM.fit(X_train.values, y_train.values)
y_pred = mySVM.predict(X_test.values)

sns.scatterplot(X_train.values[:, 0], X_train.values[:, 1], c=y_train.values, s=50, cmap='Wistia')
mySVM.plotrbf(plot_support=False)
plt.title("C : 10, Gamma = 10, Accuracy = 1")

mySVM = svm_s(c=0.01,ga=0.01)
mySVM.fit(X_train.values, y_train.values)
y_pred = mySVM.predict(X_test.values)

sns.scatterplot(X_train.values[:, 0], X_train.values[:, 1], c=y_train.values, s=50, cmap='Wistia')
mySVM.plotrbf(plot_support=False)
plt.title("C : 0.01, Gamma = 1, Accuracy = 0.497")

mySVM = svm_s(c=0.01,ga=100)
mySVM.fit(X_train.values, y_train.values)
y_pred = mySVM.predict(X_test.values)

sns.scatterplot(X_train.values[:, 0], X_train.values[:, 1], c=y_train.values, s=50, cmap='Wistia')
mySVM.plotrbf(plot_support=False)
plt.title("C : 0.1, Gamma = 100, Accuracy = 0.998")

mySVM = svm_s(c=100,ga=0.001)
mySVM.fit(X_train.values, y_train.values)
y_pred = mySVM.predict(X_test.values)

sns.scatterplot(X_train.values[:, 0], X_train.values[:, 1], c=y_train.values, s=50, cmap='Wistia')
mySVM.plotrbf(plot_support=False)
plt.title("C : 100, Gamma = 0.001, Accuracy = 0.73")

