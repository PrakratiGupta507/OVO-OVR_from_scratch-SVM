# -*- coding: utf-8 -*-
"""Q2(2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ph7Ra8kNIjDvsuj89VjKeiyqJ5DKQPLj
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm

import matplotlib.pyplot as plt
from matplotlib.axes._axes import _log as matplotlib_axes_logger
from mpl_toolkits import mplot3d
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from matplotlib.colors import ListedColormap

import scipy.io
mat = scipy.io.loadmat('/content/drive/My Drive/ML assignment 3/dataset_a.mat')

samples, label = mat['samples'], mat['labels']
df = pd.DataFrame(list(samples))
label = pd.DataFrame(label[0])
df['label'] = label
x=df[0]
y=df[1]
z=df['label']
data = pd.DataFrame({"X_Value": x, "Y_Value": y, "Category": z})
data

y = data["Category"]
X = data.drop(["Category"],axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

#0.001, 0.01, 0.1, 1, 10, 100
class svm_s(object):
  def __init__(self, k = "linear", c=0.1):
    self.SVM = svm.SVC(kernel = k, C = c, gamma=0.7)
  def fit(self,X,y):
    self.SVM.fit(X, y)

  def predict(self,X):
    pred = np.dot(X, self.SVM.coef_[0]) + self.SVM.intercept_
    y = np.sign(pred)
    for i in range(y.shape[0]):
      if y[i] < 0:
        y[i] = 0
    return y

C = [0.001, 0.01, 0.1, 1, 10, 98.5,100]
for i in C:
  mySVM = svm_s(c=i)
  mySVM.fit(X_train.values, y_train.values)
  pred = mySVM.predict(X_test.values)
  print("C : ",i,"Accuracy :",np.mean(pred==y_test.values))

def plotHyperplane1(w1,w2,b,i):
    plt.figure(figsize=(6,5))
    x_1 = np.linspace(int(np.min(X_train.values)),int(np.max(X_train.values)))
    x_2 = -(w1*x_1+b)/w2
    positive_plane = -(w1*x_1 + b +1)/w2
    negative_plane = -(w1*x_1+b-1)/w2
    titles = ['C : 0.1 (Accuracy : 0.676)',
          'C : 1 (Accuracy : 0.6725)',
          'C : 0.01(Accuracy : 0.497)']
    plt.plot(x_1,x_2,'k-',label="HyperPlane")
    plt.plot(x_1,positive_plane,'k--',label="Positive Plane")
    plt.plot(x_1,negative_plane,'k--',label="Negative Plane")
    plt.legend("topleft")
    plt.title(titles[i])
    sns.scatterplot(X_train.values[:,0],X_train.values[:,1],c=y_train.values,palette="bright")
    plt.show()

c = [0.1,1,0.01]
for i in range(len(c)):
  mySVM = svm_s(c=c[i])
  mySVM.fit(X_train.values, y_train.values)
  pred = mySVM.predict(X_test.values)
  plotHyperplane1(mySVM.SVM.coef_[0,0],mySVM.SVM.coef_[0,1],mySVM.SVM.intercept_,i)

